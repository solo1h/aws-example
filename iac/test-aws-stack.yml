AWSTemplateFormatVersion: "2010-09-09"
Description: "Test AWS Infra"

Parameters:
  Environment:
    Type: String
    Default: "prod"
    AllowedValues: ["dev", "staging", "prod"]
    Description: "Environment name"
  ServiceAZ1:
    Type: String
    Default: "eu-central-1a"
    Description: "Service Availability Zone"
  ServiceAZ2:
    Type: String
    Default: "eu-central-1b"
    Description: "Service Availability Zone"
  S3BucketName:
    Type: String
    MinLength: 8
    MaxLength: 256
    Default: "solo1h-media-uploads"
    AllowedPattern: "(?!(^xn--|.+-s3alias$))^[a-z0-9][a-z0-9-]{1,61}[a-z0-9]$"
  DBUsername:
    Type: String
    Default: "postgres"
    Description: "RDS username"
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  DBPassword:
    Type: String
    NoEcho: true
    Description: "RDS password"
    MinLength: 8
    MaxLength: 41
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
  DBDatabaseName:
    Type: String
    Default: "video_converter"
    Description: "DB Name"
    MinLength: 8
    MaxLength: 64

Resources:
  # S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName # FIXME: update with something like name-account-region
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: FreeTierOptimization
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
            ExpirationInDays: 100
      VersioningConfiguration:
        Status: Suspended
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-s3-uploads"
        - Key: Environment
          Value: !Ref Environment

  # Network
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref ServiceAZ1 #FIXME !Sub "${AWS::Region}a"
      CidrBlock: "10.0.10.0/24"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Ref ServiceAZ2 #FIXME !Sub "${AWS::Region}a"
      CidrBlock: "10.0.11.0/24"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet-2"

  # Security Group for VPC Endpoints
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for VPC endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16 # Allow HTTPS from within VPC
          Description: HTTPS from VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc-endpoint-sg"

  # ECR API VPC Endpoint
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.api"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource: "*"

  # ECR Docker Registry VPC Endpoint
  ECRDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ecr.dkr"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Resource: "*"

  # S3 VPC Endpoint (Gateway type for cost efficiency)
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::prod-${AWS::Region}-starport-layer-bucket/*"
              - !Sub "arn:aws:s3:::${AWS::Region}-prod-registrations/*"

  # CloudWatch Logs VPC Endpoint (if using awslogs driver)
  CloudWatchLogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"

  # You'll also need route tables for your private subnets if you don't have them
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-rt-1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-rt-2"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # RDS
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-subnet-group"

  ECSTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for ECS tasks"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: "HTTPS outbound for ECR/AWS services"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-ecs-task-sg"

  S3LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for Lambda function"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-s3-lambda-sg"
        - Key: Environment
          Value: !Ref Environment

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSTaskSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref S3LambdaSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${AWS::StackName}-rds-sg"

  RDSInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: !Sub "${Environment}-postgres-db"
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      EngineVersion: "17.6"
      AllocatedStorage: 10
      StorageType: gp2
      StorageEncrypted: true
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      BackupRetentionPeriod: 1
      MultiAZ: false
      PubliclyAccessible: false
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-postgres-db"
        - Key: Environment
          Value: !Ref Environment

  # ECS & ECR
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${AWS::StackName}-${Environment}-ecr"
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${Environment}-ecr"

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${AWS::StackName}-${Environment}-ecs"
      CapacityProviders:
        - "FARGATE"
      DefaultCapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-${Environment}-ecs"

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "ECSTaskRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "RDSAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "rds:DescribeDBInstances"
                  - "rds:DescribeDBClusters"
                Resource: "*"
                #  !GetAtt RDSInstance.DBInstanceArn

  ECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: "/ecs/solo1h-api-task"
      RetentionInDays: 1

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    DependsOn: ECSLogGroup
    Properties:
      RoleName: "ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: "CloudWatchLogsPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt ECSLogGroup.Arn
        - PolicyName: "ECRAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: ECSLogGroup
    Properties:
      Family: "solo1h-api-task"
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "256" # Free tier: 0.25 vCPU
      Memory: "512" # Free tier: 0.5 GB
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: "api-container"
          Image: !Sub "${ECRRepository.RepositoryUri}:latest"
          Essential: true
          # EntryPoint:
          #   - 'node'
          #   - 'index.js'
          #   - 'init'
          Environment: # FIXME IAM Auth
            - Name: "DB_HOST"
              Value: !GetAtt RDSInstance.Endpoint.Address
            - Name: "DB_PORT"
              Value: !GetAtt RDSInstance.Endpoint.Port
            - Name: "DB_NAME"
              Value: !Ref DBDatabaseName
            - Name: "DB_USER"
              Value: !Ref DBUsername
            - Name: "DB_PASSWORD"
              Value: !Ref DBPassword
            - Name: "DB_SSL"
              Value: "true"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: "ecs"

  # s3 Lambda
  S3LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: S3EventsProcessorPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-s3-lambda-role"

  S3EventsProcessor:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-s3-events-processor"
      Runtime: nodejs22.x
      Handler: index.handler
      Role: !GetAtt S3LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {console.log(event)}
      Environment:
        Variables:
          DB_HOST: "pg hostname" #!GetAtt RDSInstance.Endpoint.Address
          DB_PORT: "5432" #!GetAtt RDSInstance.Endpoint.Port
          DB_NAME: !Ref DBDatabaseName
          DB_USER: !Ref DBUsername
          DB_PASSWORD: !Ref DBPassword
      VpcConfig:
        SecurityGroupIds:
          - !Ref S3LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Timeout: 60
      MemorySize: 256
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-s3-events-processor"

  S3EventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-s3-events-rule"
      Description: "Capture S3 events and forward to Lambda"
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
        detail:
          bucket:
            name:
              - !Ref S3BucketName
      State: ENABLED
      Targets:
        - Arn: !GetAtt S3EventsProcessor.Arn
          Id: S3EventsLambdaTarget

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref S3EventsProcessor
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3EventRule.Arn

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC

  ECSClusterName:
    Description: "ECS Cluster Name"
    Value: !Ref ECSCluster

  RDSEndpoint:
    Description: "RDS Endpoint"
    Value: !GetAtt RDSInstance.Endpoint.Address

  RDSPort:
    Description: "RDS Port"
    Value: !GetAtt RDSInstance.Endpoint.Port

  TaskDefinitionArn:
    Description: "ECS Init Task Definition ARN"
    Value: !Ref ECSTaskDefinition

networks:
  stack:
    driver: bridge

services:
  pgadmin_service:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: SuperSecret
    ports:
      - "5050:80"
    networks:
      - stack

  postgres_service:
    image: postgres
    container_name: pg
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    networks:
      - stack
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  localstack:
    container_name: localstack
    image: localstack/localstack
    ports:
      - "4567:4566"
    networks:
      - stack
    environment:
      #- DEBUG=1
      - SERVICES=s3,sqs,lambda,events,iam,cloudwatch,logs,secretsmanager
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        - CMD
        - bash
        - -c
        - awslocal s3 ls
          && awslocal sqs list-queues
          && awslocal iam list-users
          && awslocal lambda list-functions
      interval: 5s
      timeout: 10s
      start_period: 10s

  aws-init:
    container_name: aws-init
    image: amazon/aws-cli
    networks:
      - stack
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      AWS_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_ENDPOINT_URL: http://localstack:4566
    volumes:
      - ./:/aws
    entrypoint: /bin/sh ./scripts/init-stack.sh

  mock-mediaconvert:
    container_name: mediaconvert
    image: mock-emc
    ports:
      - "3001:3000"
    networks:
      - stack

  api-init:
    image: api-service
    container_name: api-init
    environment:
      SERVICE_NAME: api-init
      DB_HOST: pg
    depends_on:
      postgres_service:
        condition: service_healthy
    networks:
      - stack
    entrypoint: node index.js init

  api-service:
    image: api-service
    container_name: api
    environment:
      SERVICE_NAME: api-service
      SERVICE_API: v1
      DB_HOST: pg
      AWS_ENDPOINT_URL: http://localstack:4566
    depends_on:
      api-init:
        condition: service_completed_successfully
      aws-init:
        condition: service_completed_successfully
    ports:
      - "8000:3000"
    networks:
      - stack